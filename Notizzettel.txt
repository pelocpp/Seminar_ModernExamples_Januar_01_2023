// =====================================================================
// Notizzettel.txt
// =====================================================================

Modernes C++ / Firmenseminar ISO Gmbh Nürnberg

Peter Loos // "Du"

peter.loos@gmx.de

// =====================================================================

Agenda
======

Mittwoch:
---------

Templates (generische Programmierung)
  = Funktionstemplates => wichtig
  = Klassentemplates => wichtig
  = Spezialisierung => wichtig


Typermittlung im Detail
  = auto (C++11) => wichtig
  = Automatischer Rückgabetyp (C++14) => wichtig

STL:  Getting Started

Lambdas (C++11)
  = Grundlagen => wichtig
  = Je nach Zeit: Generische Lambdas


Standard Template Library
  = Iteratorkonzept => wichtig
  = Container (z.T. C++11) => wichtig


Algorithmen:
  = std::for_each, std::generate


Übungen:
~~~~~~~~

  = Klassentemplate (Calculator)
  = Lambda Funktionen, Aufgabe 1 (Even)
  = STL-Algorithmen, Aufgabe 2 (Fibonacci-Zahlen)
  = Generische Lambdas: Personensuche

Donnerstag:
-----------

Besprechung der Übungen vom Mittwoch Abend.


Neue Techniken bei C++
  = Range-basierte for-Schleife (C++11) => wichtig
  = RValues und Move-Semantik (C++11) => wichtig

Erweiterungen
  = Standard-Bibliothek (Überblick):
       Container-Klassen, Iteratoren, Algorithmen, Funktoren => wichtig
       std::transform, std::back_inserter
  = Smart Pointer (Unique, Shared, Weak Pointer) => wichtig

Metaprogramming, Type Traits: Je nach Zeit


Übungen:
~~~~~~~~
  = Smart Pointer
  = Move-Semantik


Kurz:
  = Variadische Templates (C++11) => eventuell
  = Template-Argumente => kurz
  = Neue Utility-Klassen (C++ 17, std::optional, std::variant, std::any, std::string_view)
    => unwichtig, es sei denn, es ist Zeit


// =====================================================================

Wo stehe ich in C++
Was sind meine Erwartungen
Was MUSS drin sein
std::string_view
Neue Klassen (std::optional, std::variant, ...)
C++ 20 ...
C++ 11 Features ...

===> Hinführung zur STL

// =====================================================================

C++:

OO: Objekt-Orientierte Pr.

GP: Generische Programmierung

Entwurf:   Bjarne Stroustrup

Templates: Alexander Stepanov (Generische Programmierung)

C with Classes (erste :) C++)


==========================================================

5 / 7  ==> 0  //  1 ?

1.0 / 3.0 == 0.3333 

Ginge runden auch ?? 


Anforderung: Für T = int möchte ich bei div runden haben.

====================================================

STL:

Klassenbibliothek   // Generisch


Container: Verwaltet Daten nach einer STRATEGIE
==========

Arrays
Hash-Tabelle:      std::unordered_map:  WERT (Value), SCHLÜSSEL (Key)
Baum
Verkettete Liste

std::vector<T>:

Ist wie in C-Array, NUR flexibel Lang.

Iterator:
=========

Was ist ein Iterator:  Eine POSITION in einem Container !

Welchen Typ hat diese Position / Iterator?

A) Ist pro STL Container anders ...

B) Wird durch den STL Container festgelegt 

C) WO: In der KLasse des STL Containers.

D) Per DEFINITION hat jeder STL Container

    ZWEI vordefinierte Positionen:   begin   und end

Welche Klasse ist das jetzt:

        Wollen wir nicht wissen :)

Aber: Ein Iterator (Position) ist ein KONZEPT:

eine Definition:

a) begin(), end():  2 Standard-Positionen

b) Was kann ich mit einer Position machen?

operator++
*operator
operator != oder operator ==

Es gibt unterschiedliche Leistungsstärken der Iteratoren:

operator[]

STL-Algorithmen:
================

Verwenden häufig

== eine Funktion (C)
== einen Funktor  // ist eine Instanz einer Klasse 
== einen Lambda   // ist eine Instanz einer Klasse 


Idee:

    // STL algorithm specific
    std::for_each(
        vec.begin(),
        vec.end(),
        eineFunktion
    );

    std::fill(
        vec2.begin(),
        vec2.end(),
        1
    );

    Programmieren in sog. "Building Blocks"


    =============================================

// general purpose operator

bool operator() (int n1, int n2, int x, int n, int g) 

    class Comparer
    {
    private:
        mutable bool m_flag;

    public:
        Comparer() : m_flag{ true } {}
        Comparer(bool flag) : m_flag{ flag } {}

        bool operator() (int n1, int n2) const {
            m_flag = true;
            return (m_flag) ? n1 < n2 : n1 > n2;
        }
    };

Eine Klasse, die den operator() implementiert 
( Schnittstelle hängt vom Anwendungsfall ab  )
nennt man Funktor:  Aufrufbare Klasse

// ==================================================

Aufgaben zu generischen Lambda Funktionen:
    Aufgabe 1: Personensuche
    Könnte C++ 17 sein ...............

Aufgaben zu Lambda Funktionen:
   Aufgabe 1: Einfache Realisierung einer Lambda-Funktion

Aufgaben zu STL-Algorithmen:
   Aufgabe 2: Fibonacci-Zahlen

// ==================================================

template <typename T, typename U>
std::pair<T, U>

Ist eine einfache Helper-Klasse,
um 2 Werte abzuspeicher .

// ==================================================


Warum stehen da überall geschweifte Klammern ????

A) Neue Form der Syntax: Uniform Init.

Idee:            Class X {}

                 X x(1, 2, 3);
                 x.foo (4, 5, 6);

                 NEU:

                 X x{ 1, 2, 3 };
                 x.foo (4, 5, 6);

                 Geht auch:

                 X x{};


B) Mit Konsequenzen !!!!

// ===========================================

:== ... 460:      Anonymes Objekt // temp. Obj. // Wurde freigegeben 
:== ... 0E0

:== ... C20:

:== ... 310:


// ===========================================


Java, C#, JavaScript:

Referenz-Semantik    (NUR: new)

C++:

Referenz-Semantik    (new)

Werte-Semantik    (Objekte am Stack)

// ==================================================


Smart - Pointer:
----------------

Worum geht es ???

int* ip = new int [100];

delete[] ip;

Falsch: delete ip;   KEINE MELDUNG DES ÜBERSETZERS !   UB  Undefined Behaviour



int* ip2 = new int;

delete ip2;

Was ist, wenn der delete FEHLT ?????????   Lücke

------------------------

int* ip = new int [100];

....

func (ip);    // Frage:   In func:   delete[] ip;


Moderne Sprachen:   Java, C#:   new  , KEIN delete ABER: Garbage Collector

Wie nennt man das Suchen der deletes:  Death March

https://www.medimops.de/edward-yourdon-death-march-yourdon-press-computing-series-gebundene-ausgabe-M00137483104.htm

=======================================================

Fehlende delete:

IDEE: 

a) C++ (OO): Es gibt Klassen
b) Es gibt Destruktoren
c) Ansatz:   Man legt einen Zeiger (int*) in einer Hüllenklasse / Hüllenobjekt ab

   ===> Objekte haben Destruktoren:
        Diese werden DETERMINISTISCH aufgerufen
   ===> Ist der delete im Destruktor platziert:
        Dann wird der delete DETERMINISTISCH aufgerufen

d) Forderung: Hüllenobjekte sollten am Stack liegen.

Historisch:   std::auto_ptr

Überarbeitung:

Verfeinerung des grundlegenden Ansatzes:

std::unique_ptr:

   Ein unique_ptr kann zu EINEM Zeitpunkt nur EINEN BESITZER haben.
   (keine Kopie möglich zb)
   Der BESITZER kann wechseln

std::shared_ptr (std::weak_ptr)

   Ein shared_ptr kann zu EINEM Zeitpunkt MEHRERE BESITZER haben.
   (Kopie möglich )
   Frage:  Im Destruktor eines shared_ptr kann der delete nicht grundsätzlich
   aufgerufen werden.

   ===> Wir zählen die Besitzer // Referenz-Counter
   ===> Beobachtung:  Ähnlichkeiten mit einem Garbage Collector: 

   Zähler :  0 => 1 => 2  => 3  => 2  => 1  => 0:   JETZT: delete

// ===========================================

   Visual C++ 17.4 :
   
   Copy Elision: to elide 

etw. ignorieren  | ignorierte, ignoriert |
etw. übergehen  | überging, übergangen |
etw. auslassen  | ließ aus, ausgelassen |

// ===========================================

Welches ist / könnte der Vorzugs-Smart-Pointer sein ???

std::unique_ptr oder std::shared_ptr 

"std::unique_ptr ist wie Raw Zeiger"   // ABER: delete ist garantiert

std::shared_ptr kann langsamer sein:

Er ist multi-threading sicher

Meinung des Referenten: Go for "std::unique_ptr"

Noch ein Aber: 

Es kann sein,
dass ein std::shared_ptr den Speicher nicht frei gibt :-(((

Es gibt Situationen, in denen das Referenz-Zählen nicht funktioniert.

Lösung: 

std::shared_ptr
std::weak_ptr

A) Handling
B) Beispiel eines Zyklus

Warum geht es nicht ????

std::shared_ptr<ParentNode> parent{ new ParentNode {} };
std::shared_ptr<RightNode> rightNode{ new RightNode { parent } };
std::shared_ptr<LeftNode> leftNode{ new LeftNode { parent } };

parent->setRightNode(rightNode);
parent->setLeftNode(leftNode);

}   // ENDE Des Scopes


Was ist die Moral von der Geschichte:

// ======================================================

   ......   vec.begin() ..........

   ...... std::begin(vec) ..........

Name Lookup zu tun ..........

https://stackoverflow.com/questions/7593086/why-use-non-member-begin-and-end-functions-in-c11

            int m;
            m = n;
00007FF73BF091C9  mov         eax,dword ptr [rbp+0C4h]  
00007FF73BF091CF  mov         dword ptr [rbp+0E4h],eax 


            int m;
            m = n;
00007FF73BF09270  mov         rax,qword ptr [rbp+168h]  
00007FF73BF09277  mov         eax,dword ptr [rax]  
00007FF73BF09279  mov         dword ptr [rbp+184h],eax


// ======================================================

Übungen:
~~~~~~~~
  = Smart Pointer  : Alle drei 
  = Move-Semantik: AUfgabe 1





